{"version":3,"sources":["components/LifeCanvas.js","App.js","serviceWorker.js","index.js"],"names":["Menu","styled","div","_templateObject","Input","input","_templateObject2","Button","button","_templateObject3","Header","h1","_templateObject4","Cell","_this$props","this","props","x","y","cellSize","react_default","a","createElement","className","style","left","concat","top","width","height","React","Component","LifeCanvas","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","initializeBoard","board","state","makeCells","cells","push","getOffset","rect","ReactDOM","findDOMNode","refs","gameboard","getBoundingClientRect","doc","document","documentElement","window","pageXOffset","clientLeft","pageYOffset","clientTop","handleClick","e","isRunning","offset","offsetX","clientX","offsetY","clientY","Math","floor","setState","checkNeighbors","neighbors","validNeighbors","i","length","validNeighbor","x1","y1","runGameOfLife","runCycle","newGame","timeoutHandler","setTimeout","interval","prevState","generation","stopGameOfLife","clearTimeout","clearBoard","preventDefault","randomize","random","pow","alert","count","handleChange","defineProperty","target","name","value","toggleGridSize","dropGridSize","toggleGameRules","dropGameRules","handleBoardSize","_this2","color","fontSize","fontWeight","backgroundSize","onClick","ref","map","cell","LifeCanvas_Cell","key","reactstrap_es","isOpen","toggle","caret","background","outline","right","padding","borderRadius","overflowWrap","onChange","maxWidth","margin","App","src_components_LifeCanvas","Boolean","location","hostname","match","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b83ad38b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './LifeCanvas.css';\r\nimport styled from 'styled-components';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst Menu = styled.div`\r\n    font-size: 1rem;\r\n    font-weight: 800;\r\n    position: absolute;\r\n    width: 250px;\r\n    top: 75px;\r\n    right: 0px;\r\n    outline: none;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 50px;\r\n    text-align: center;\r\n`;\r\n\r\nconst Button = styled.button`\r\n    background: black;\r\n    color: red;\r\n    font-size: 1.2rem;\r\n    font-weight: 800;\r\n    padding: 0.5rem;\r\n    margin: 0.5rem;\r\n    border: none;\r\n    border-radius: 0.5rem;\r\n    outline: none;\r\n`;\r\n\r\nconst Header = styled.h1`\r\n    font-size: 3rem;\r\n    font-weight: 800;\r\n`;\r\n\r\nclass Cell extends React.Component{\r\n    render(){\r\n        const {x, y, cellSize} = this.props;\r\n        return(\r\n            <div \r\n                className=\"cell\"\r\n                style={{\r\n                    left: `${cellSize * x + 1}px`,\r\n                    top: `${cellSize * y + 1}px`,\r\n                    width: `${cellSize - 1}px`,\r\n                    height: `${cellSize - 1}px`,\r\n                }}\r\n           />\r\n        )\r\n    }\r\n}\r\n\r\nclass LifeCanvas extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            height: 600,\r\n            width: 600,\r\n            cellSize: 40,\r\n            cells: [],\r\n            interval: 500,\r\n            isRunning: false,\r\n            generation: 0,\r\n            random: 20,\r\n            dropGridSize: false,\r\n            dropGameRules: false,\r\n        }\r\n        this.board = this.initializeBoard();\r\n    }\r\n    \r\n    initializeBoard = () => {\r\n        let board = [];\r\n        for(let x = 0; x < (this.state.height/this.state.cellSize); x++){\r\n            board[x] = [];\r\n            for (let y = 0; y < (this.state.width/this.state.cellSize); y++){\r\n                board[x][y] = false;\r\n            }\r\n        }\r\n        return board;\r\n    }\r\n    makeCells = () => {\r\n        let cells = [];\r\n        for (let x = 0; x < this.state.height/this.state.cellSize; x++) {\r\n            for (let y = 0; y < this.state.width/this.state.cellSize; y++) {\r\n                if (this.board[x][y]) {\r\n                    cells.push({ x, y });\r\n                }\r\n            }\r\n        }\r\n        return cells;\r\n    }\r\n    getOffset = () => {\r\n        const boardRef = ReactDOM.findDOMNode(this.refs.gameboard)\r\n        const rect = boardRef.getBoundingClientRect();\r\n        const doc = document.documentElement;\r\n\r\n        return {\r\n            x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n            y: (rect.top + window.pageYOffset) - doc.clientTop,\r\n        }\r\n    }\r\n    handleClick = e => {\r\n        if (!this.state.isRunning) {\r\n            const offset = this.getOffset();\r\n            const offsetX = e.clientX - offset.x;\r\n            const offsetY = e.clientY - offset.y;\r\n\r\n            const x = Math.floor(offsetX/this.state.cellSize);\r\n            const y = Math.floor(offsetY/this.state.cellSize);\r\n\r\n            if (x >= 0 && x <= (this.state.height/this.state.cellSize) && y >= 0 && y <= (this.state.width/this.state.cellSize)){\r\n                this.board[x][y] = !this.board[x][y];\r\n            }\r\n\r\n            this.setState({ cells: this.makeCells()});\r\n        }\r\n    }\r\n    checkNeighbors = (board, x, y) => {\r\n        let neighbors = 0;\r\n        const validNeighbors = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n        for (let i = 0; i < validNeighbors.length; i++){\r\n            var validNeighbor = validNeighbors[i];\r\n            let x1 = x + validNeighbor[0];\r\n            let y1 = y + validNeighbor[1];\r\n\r\n            if (x1 >= 0 && x1 < this.state.height/this.state.cellSize && y1 >= 0 && y1 < this.state.width/this.state.cellSize && board[x1][y1]){\r\n                neighbors++;\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n    runGameOfLife = () => {\r\n        if (this.state.cells.length > 0){\r\n            this.setState({isRunning: true});\r\n            this.runCycle();\r\n        }\r\n    }\r\n    runCycle = () => {\r\n        let newGame = this.initializeBoard();\r\n\r\n        //plots the next board\r\n        for (let x = 0; x < this.state.height/this.state.cellSize; x++){\r\n            for (let y = 0; y < this.state.width/this.state.cellSize; y++){\r\n                let neighbors = this.checkNeighbors(this.board, x, y);\r\n                if (this.board[x][y]){\r\n                    //covers rule # 1,2,3\r\n                    if (neighbors === 2 || neighbors === 3){\r\n                        newGame[x][y] = true;\r\n                    } else {\r\n                        newGame[x][y] = false;\r\n                    }\r\n                } else {\r\n                    //covers rule # 4\r\n                    if (!this.board[x][y] && neighbors === 3){\r\n                        newGame[x][y] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.board = newGame;\r\n        this.setState({cells: this.makeCells()});\r\n        this.timeoutHandler = window.setTimeout(() => {this.runCycle();}, this.state.interval);\r\n        this.setState(prevState => ({\r\n            generation: prevState.generation + 1\r\n        }));\r\n    }\r\n    stopGameOfLife = () => {\r\n        this.setState({isRunning: false});\r\n        if (this.timeoutHandler){\r\n            window.clearTimeout(this.timeoutHandler);\r\n            this.timeoutHandler = null;\r\n        }\r\n    }\r\n    clearBoard = e => {\r\n        e.preventDefault();\r\n        //make new board first\r\n        this.board = this.initializeBoard();\r\n        //initialize cells\r\n        this.setState({cells: this.makeCells(), generation:0});\r\n    }\r\n    randomize = e => {\r\n        e.preventDefault();\r\n        if (this.state.random > Math.pow((this.state.height/this.state.cellSize),2)){\r\n            alert(`Cells to be generated is greater than the board size. Please enter a number less than or equal to ${Math.pow((this.state.height/this.state.cellSize),2)}`);\r\n            return;\r\n        }\r\n        this.board = this.initializeBoard();\r\n        let count = 0;\r\n        for (let i = 0; i < this.state.random; i++){\r\n            while (count < this.state.random) {\r\n                let x = (Math.floor(Math.random()*(this.state.height/this.state.cellSize)));\r\n                let y = (Math.floor(Math.random()*(this.state.height/this.state.cellSize)));\r\n                if (x >= 0 && x < this.state.height/this.state.cellSize && y >= 0 && y < this.state.width/this.state.cellSize && !this.board[x][y] && count < this.state.random){\r\n                    this.board[x][y] = true;\r\n                    count++\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.setState({cells: this.makeCells()});\r\n    }\r\n    handleChange = e => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    }\r\n    toggleGridSize = () => {\r\n        this.setState( prevState => ({\r\n            dropGridSize: !prevState.dropGridSize\r\n        }))\r\n    }\r\n    toggleGameRules = () => {\r\n        this.setState({\r\n            dropGameRules: !this.state.dropGameRules\r\n        })\r\n    }\r\n    handleBoardSize = e => {\r\n        e.preventDefault();\r\n        if (e.target.name === 'small'){\r\n            this.setState({\r\n                height: 600,\r\n                width: 600,\r\n            }, () => {\r\n                this.board = this.initializeBoard();\r\n            })\r\n        } else if (e.target.name === 'medium'){\r\n            this.setState({\r\n                height: 880,\r\n                width: 880,\r\n            }, () => {\r\n                this.board = this.initializeBoard();\r\n            })\r\n        } else if (e.target.name === 'large'){\r\n            this.setState({\r\n                height: 1200,\r\n                width: 1200,\r\n            }, () => {\r\n                this.board = this.initializeBoard();\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Header>GAME OF LIFE</Header>\r\n                <div style={{color:\"red\", fontSize:\"1.5rem\", fontWeight:\"800\"}}>Generation # {this.state.generation}</div>\r\n\r\n                <div>\r\n                    <div    \r\n                        className=\"board\"\r\n                        style={{\r\n                            width: this.state.width,\r\n                            height: this.state.height,\r\n                            backgroundSize:`${this.state.cellSize}px ${this.state.cellSize}px`}}\r\n                        onClick={this.handleClick}\r\n                        ref=\"gameboard\">   \r\n                        {this.state.cells.map(cell => (\r\n                            <Cell cellSize={this.state.cellSize} x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\r\n                        ))}\r\n                    </div>\r\n                    <Menu>\r\n                        <Dropdown isOpen={this.state.dropGameRules} toggle={this.toggleGameRules}>\r\n                            <DropdownToggle caret style={{background:\"black\", color: \"red\", outline:\"none\", fontSize:\"1.2rem\", fontWeight:\"800\"}}>Game of Life Rules</DropdownToggle>\r\n                            <DropdownMenu right={true} style={{padding: \"0\", borderRadius:\"0.5rem\"}}>\r\n                                <DropdownItem style={{background:\"black\", color:\"red\", fontSize:\"1.2rem\", fontWeight:\"800\", borderRadius:\"0.5rem\", width: \"600px\", overflowWrap:\"normal\"}}>\r\n                                    <p style={{borderRadius:\"1rem\", width:\"100px\", padding:\"0.2rem\"}}>\r\n                                        1. Any live cell with fewer than two live neighbors dies,<br /> as if caused by under population.<br />\r\n                                        2. Any live cell with two or three live neighbors<br /> lives on to the next generation.<br />\r\n                                        3. Any live cell with more than three live neighbors<br /> dies, as if by overpopulation.<br />\r\n                                        4. Any dead cell with exactly three live neighbors becomes<br /> a live cell, as if by reproduction.<br />\r\n                                    </p>\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </Menu>\r\n                    <Menu style={{top:\"400px\"}}>\r\n                        <Dropdown isOpen={this.state.dropGridSize} toggle={this.toggleGridSize}>\r\n                            <DropdownToggle caret style={{background:\"black\", color: \"red\", outline:\"none\", fontSize:\"1.2rem\", fontWeight:\"800\"}}>Change Grid Size</DropdownToggle>\r\n                            <DropdownMenu style={{padding: \"0\", borderRadius:\"1rem\", width:\"200px\"}}>\r\n                                <DropdownItem onClick={this.handleBoardSize} style={{background:\"black\", color:\"red\", height: \"50px\", fontSize:\"1.2rem\", fontWeight:\"800\"}} name='small'>Small (15x15)</DropdownItem>\r\n                                <DropdownItem onClick={this.handleBoardSize} style={{background:\"black\", color:\"red\", height: \"50px\", fontSize:\"1.2rem\", fontWeight:\"800\"}} name='medium'>Medium (22x22)</DropdownItem>\r\n                                <DropdownItem onClick={this.handleBoardSize} style={{background:\"black\", color:\"red\", height: \"50px\", fontSize:\"1.2rem\", fontWeight:\"800\"}} name='large'>Large (30x30)</DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </Menu>\r\n                </div>\r\n     \r\n                <div className=\"controls\">\r\n                    <p>\r\n                        Each cycle takes <Input onChange={this.handleChange} name='interval' value={this.state.interval} /> ms\r\n                    </p>\r\n                    <div>\r\n                        <Button onClick={this.runGameOfLife}>Start</Button>\r\n                        <Button onClick={this.stopGameOfLife}>Stop</Button>\r\n                        <Button onClick={this.clearBoard}>Clear</Button> \r\n                    </div>\r\n                    <div>\r\n                        <p style={{fontSize: \"1.2rem\"}}># of Random Cells <Input onChange={this.handleChange} name='random' value={this.state.random} /></p>\r\n                        <Button onClick={this.randomize}>Generate</Button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div style={{maxWidth: \"800px\", margin:\"0 auto\"}}>\r\n                    <h1>About This Algorithm</h1>\r\n                    <p style={{fontWeight: \"700\"}}>The game is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. One interacts with the Game of Life by creating an initial configuration and observing how it evolves, or, for advanced players, by creating patterns with particular properties.</p>\r\n                    <p>Each round of the simulation examines the current state of the grid, and then\r\n                        produces an entirely new grid consisting of the old state. (Remember the\r\n                        discussion about double buffers earlier--we don't want to modify the same grid\r\n                        we're examining, lest we munge future results.)\r\n\r\n                        This new grid becomes the \"current\" state of the simulation, and the process\r\n                        repeats. Each new grid is referred to as a _generation_.\r\n\r\n                        The beautiful thing about cellular automata is that sometimes very complex\r\n                        behavior can emerge from very simple rules.\r\n\r\n                        Practically speaking, CAs have been used in biological and chemical simulations\r\n                        and other areas of research, such as CA-based computer processors, and other\r\n                        numeric techniques.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LifeCanvas;\r\n\r\n\r\n//smiley face\r\n// 0: {x: 3, y: 4}\r\n// 1: {x: 11, y: 4}\r\n// 2: {x: 2, y: 5}\r\n// 3: {x: 4, y: 5}\r\n// 4: {x: 10, y: 5}\r\n// 5: {x: 12, y: 5}\r\n// 6: {x: 1, y: 6}\r\n// 7: {x: 5, y: 6}\r\n// 8: {x: 9, y: 6}\r\n// 9: {x: 13, y: 6}\r\n// 10: {x: 1, y: 10}\r\n// 11: {x: 13, y: 10}\r\n// 12: {x: 2, y: 11}\r\n// 13: {x: 12, y: 11}\r\n// 14: {x: 3, y: 12}\r\n// 15: {x: 11, y: 12}\r\n// 16: {x: 4, y: 13}\r\n// 17: {x: 5, y: 13}\r\n// 18: {x: 6, y: 13}\r\n// 19: {x: 7, y: 13}\r\n// 20: {x: 8, y: 13}\r\n// 21: {x: 9, y: 13}\r\n// 22: {x: 10, y: 13}","import React, { Component } from 'react';\nimport './App.css';\nimport LifeCanvas from './components/LifeCanvas';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <LifeCanvas />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}